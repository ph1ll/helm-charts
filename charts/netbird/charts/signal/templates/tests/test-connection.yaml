apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "signal.fullname" . }}-test-connection"
  labels:
    {{- include "signal.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: golang
      image: golang
      command: 
        - /bin/sh
      args: 
        - -c
        - |
          cd /root
          go mod init netbird-helm-chart/signal-test
          go get github.com/netbirdio/netbird/encryption@v{{ .Chart.AppVersion }}
          go get github.com/netbirdio/netbird/signal/client@v{{ .Chart.AppVersion }}
          go get github.com/netbirdio/netbird/signal/proto@v{{ .Chart.AppVersion }}
          go get github.com/netbirdio/netbird/version@v{{ .Chart.AppVersion }}
          cat <<EOF > main.go
          package main

          import (
              "context"
              "fmt"
              "os"
              "golang.zx2c4.com/wireguard/wgctrl/wgtypes"
              signal "github.com/netbirdio/netbird/signal/client"
              signalProto "github.com/netbirdio/netbird/signal/proto"
          )

          func main() {
              key, err := wgtypes.GeneratePrivateKey()
              if err != nil {
                  fmt.Fprintf(os.Stderr, "error: %v\n", err)
                  os.Exit(1)
              }

              ctx := context.Background()

              client, err := signal.NewClient(ctx, "{{ include "signal.fullname" . }}:{{ .Values.service.port }}", key, false)
              if err != nil {
                  fmt.Fprintf(os.Stderr, "error: %v\n", err)
                  os.Exit(1)
              }

              go func() {
                err := client.Receive(func(msg *signalProto.Message) error {
                  return nil
                })
                if err != nil {
                  return
                }
              }()

              client.WaitStreamConnected()

              if client.IsHealthy() {
                  fmt.Println("IsHealthy() reported success!")
                  os.Exit(0)
              } else {
                  fmt.Println("IsHealthy() reported failure!")
                  os.Exit(1)
              }
          }
          EOF
          go run .
  restartPolicy: Never
